Linux基础常用命令
	linux目录结构
		bin 放置一些常用的linux命令
		boot 系统引导的一些配置
		dev  系统的设备信息,相当于window系统的资源管理器
		etc  系统的环境配置
		home 用户目录
		lib 库
		lib64 库
		lost+found 平时文件夹为空,当非正常关机的时候,会记录日志在当前文件中
		media 外部硬件设备挂载在这看,比如说U盘
		mnt  挂载文件的查看位置
		opt  安全软件的安装包存放的位置
		proc srv sys 系统内核文件不要动
		sbin 有高级执行权限的用户的linux命令
		selinux linux的安全组件
		tmp 临时存放文件的目录
		usr 用户安装软件的时候,按章完以后软件的存放位置,一般安装完软件以后存放的位置为/usr/local
		var 日志存放的位置
	vim编辑器常用命令
		1.三种常见模式
			1.1正常模式
				在当前模式下可以使用快捷键
			1.2插入模式/编辑模式
				在当前模式下可以输入内容,进入当前模式的方式(i,I,o,O,a,A,r,R)
			1.3命令行模式
				在当前模式中可以提供相关命令执行当前文件

	关机&重启命令
		shutdown
			shutdown -h now:表示立即关机
			shutdown -h 1:表示一分钟后关机
			shutdown -r now:立即重启
		halt:直接使用,效果等价于关机
		reboot:重启系统
		sync:把内存的数据同步到磁盘,重启和关机前使用此命令确保内存的数据写入磁盘
		注意:当关机和重启时,都应该执行以下sync命令,把内存数据写入磁盘,防止数据丢失
	用户登录&注销
		logout注销当前登录用户(注意:logout命令在图形界面使用无效,像在类似Xshell远程连接的时候此命令才有效)
	用户管理
		添加用户
			useradd [可选] 用户名
				实际案例:添加一个用户  test
			useradd -g 用户组 用户名
				把常见的当前用户分配到-g后边的用户组中
		修改用户组
			usermod -g 用户组 用户名
		修改用户密码
			passwd 用户名
		删除用户
			userdel [可选] 用户名
				实际案例
					userdel 用户名(只是删除用户,并不删除用户资源文件夹)
					userdel -r 用户名(删除用户,并删除用户资源文件夹)
					注意:删除用户时,一般不删除资源文件
		查询用户信息
			id root(用户名)
				返回信息
					uid=0(root)  gid=0(root) 组=0(root)
					如果不存在则提示,无此用户
			whoami查看当前登录的是那个用户
		
		用户组
			增加用户组
				groupadd 组名
			删除组
				groupdel 组名
		用户和组相关的文件
			/etc/passwd
				用户配置文件(用户信息)
			/etc/shadow
				口令配置文件(密码和登录信息,是加密的)
			/etc/group
				组配置文件
	使用操作命令
		指定运行级别
			0:关机
			1:单用户(找回丢失密码)
			2:多用户无网络级别
			3:多用户有网络(开发常用级别)
			4:保留
			5:图形界面
			6:重启
			系统的运行级别配置文件在/etc/inittab
			切换运行级别的指令
				init [012356]
		找回用户密码案例
			1.机器关机
			2.启动
			3.启动按回车
			4.按e
			5.选择第二个菜单
			6.按e
			7.空格 输入1进去单用户模式
			8.回车
			9.b进入boot引导就进去单用户模式获取免密的root权限.修改对应的用户名和密码就好
		文件目录类的指令
			pwd:显示当前目录的绝对路径
			ls:浏览当前目录中的文件和对应文件信息
			cd:跳转目录
			mkdir:创建文件夹(如果mkdir -p 目录结构,会创建多级目录)
			rmdir:删除目录(简写rm,rm -rf 删除当前目录和目录中的所有文件,r代表递归删除目录文件,f代表不询问删除)
			touch:创建一个空的文件(注意mkdir是创建的文件夹而touch创建的是文件,文件指.txt等类型的文件)touch 文件名  文件名 可以一次性创建多个文件
			cp:复制文件到执行目录
				cp [选项] 要复制的文件   复制到那去
				参数-r 复制当前文件夹中和文件夹中的子文件全部都拷贝过去,不加-r参数只能复制单个文件
				在使用cp -r 复制多个文件的时候,有时候复制到的目录有可能已经存在了同名的一部分文件,如果同名都一个文件询问一下你是否覆盖,这样太麻烦了
				可以用\cp -r 这样就强制覆盖不在询问默认覆盖
			mv:移动文件或者文件夹,或者是修改文件或者文件夹名称
				mv test.txt  /home/test/test.txt
				mv test.txt  cs.txt  (因为当前目录中已经存在test.txt文件了,会把当前文件中的文件重命名)
			cat:查看文件内容,只能浏览不能修改
			more:浏览文件,只能查看不能修改,但是展示是按页展示的.也就是一屏幕一屏幕的内容展示
				回车键:代表向下翻一屏
				enter:代表向下翻一行
				q:退出more查看模式
				Ctrl+F:向下滚一屏
				Ctrl+B:向上滚一屏
				=:输出当前行的行号
				:f:输出文件名和当前行的行号
			less:每次获取部分文件展示,不会一次加载,显示的速度会比较快 
				空格:向下翻动一页
				pagedown:向下翻动一页
				pageup:向上翻动一页
				/内容:向下搜寻"内容":n向下,N向上搜寻
				?字符串:向上搜寻"字符串":n向上查找,N向下搜寻
				q退出查看
			>输出重定向:会覆盖文件内容
			>>追加指令:会在末尾追加,不覆盖内容
			echo:输出内容到控制台
			head:显示文件开头部分,默认情况下显示前10行
				head -n 5 文件:查看文件5行的内容
			tail:输出文件中尾部的内容,默认显示尾部10行的内容
			ln:软连接,相当于给原来文件创建了一快捷键
				ln -s 需要连接的文件  快捷方式
				删除软连接
					rm -rf 链接名称 文件后缀不要带/
			history:查看历史执行过的命令
				history 10 查看最后10条命令
				!140执行 历史命令中的140条命令
			date:时间命令
				date 显示当前时间
				date +"%Y" 显示当前年份
				date +"%m" 显示当前月份
				date +"%d" 显示当前那一天
				date +"%Y%m%d %H%M%S":显示年月日时分秒
				注意后边的加号放引号里边和外边都行,但是+号不能省略
				设置日期
					date -s 字符串
			cal:显示日历的方式显示
					cal 不加任何东西显示当月的日历
					cal 2018 显示2018年的12个月的日历 
			find:将制定目录向下递归遍历各个子目录,将满足条件的文件后者目录显示在终端
				find -name 查找的位置  查找的文件名
				find -user 根据用户
				find -size 根据文件大小  +大于多少M   -小于多少M   =多少M
			grep
			locate:快速定位文件路径
			gzip:压缩文件
				gzip 文件名  
				会把文件名改为 文件名.gz文件,以前的文件就没有了
				压缩成*.gz类型
			gunzip:解压缩
			zip:压缩为zip包  -r递归压缩打包文件夹
				zip -r 打包成的文件名   被打包的目录
			unzip:解压缩 -d 指定解压缩存放的位置
			tar:打包
				-c 产生.tar打包文件
				-v 显示详细信息
				-f 指定压缩后的文件名
				-z 打包同时压缩
				-x 解包.tar文件
				tar -zcvf 文件名.tar a.txt b.txt  压缩后的文件名  文件名.tar.gz
				tar zcvf  文件名.tar.gz /home/  打包/home/目录中的所有文件
				tar -zxvf 解压文件
				tar -zxvf 解压文件 -C 解压到的目录
			chown:修改文件的所有者
				chown 用户名  文件
				chown 用户名:组名 文件名
			chmod:修改文件的操作级别
				chmod x+w+r  文件名  写,读，执行
				u:所有者
				g:所有组
				o:其他人
				a:所有人
			chgrp：把文件给别的组
				chgrp 给的组名  文件
			crontab:进行定时任务的设置
				-e:编辑crontab定时任务
				-l:查询crontab任务
				-r:删除当前用户所有的crontab任务
		进程管理
			查看进程
				ps -a:显示当前终端的所有进程信息
				ps -u:以用户的格式显示进程信息
				ps -x:显示后台进程运行的参数
				ps -ef | grep sshd 查看sshd的父进程
			pstree:把进程显示为树
				-p 显示进程ID
				-u 进程属于哪个用户
			删除进程
				kill
					kill 通过进程号杀死进程
					kill -9 强制杀死进程
				killall
					killall 通过进程名称杀死进程,可以用通配符
		服务管理
			service iptable stop 关闭防火墙  （注意:centos7以后的service命令需改为了systemctl命令）
			chkconfig --list  查看服务的启动状态
			chkconfig --level 5 运行级别  服务名 on/off 设置是否自启动
			chkconfig  服务名 off  在所有运行级别关闭防火墙
		动态监控进程
			top
				当进入top以后,输入u以后再输入用户名,可以展示属于输入用户名的进程
				k 输入进程号,会杀死进程
		监控网络进程
			netstat
				netstat -anp
		Shell脚本
			--------------------------------
			以#!/bin/bash 执行哪个shell
			#!/bin/bash
			echo "Hello,world"
			--------------------------------
			变量(注意一般shell脚本的变量名为"大写")
				分为两种变量:1.系统变量 2.用户自定义变量
				set:用来查看shell中的所有的变量
				定义变量:变量名=内容
				readonly 定义静态变量（注意静态变量不能unset消除)
				unset:撤销变量
				注意=号两边不能有空格
				A=$(ls -al) 获取括号中的内容赋值给A
			设置环境变量
				export 变量=内容  (将Shell变量输出为环境变量)
				source 配置文件   (让修改后的配置信息立即生效)
				echo $变量名  	  (查看环境变量的内容)
			shell多行注释
				:<<!
					中间的内容将被注释掉
				!
			位置参数变量
				$n:n为数字,$0代表命令本身, $1-$9代表第一到第九个参数,10以上的参数需要用${}括号
				$*:把所有参数看成一个整体
				$@:把所有参数看成一个整体,不过$@把每个参数区分对待
				$#:代表命令行中的参数个数
				$$:获取当前进程号
				$!:后台运行的最后一个进程号
				$?:最后一个命令返回的状态，这个变量的值为0,证明上一个命令正确执行,如果变量的值为非0,则上一个命令执行不正确
			运算符
				三种写法
					RESET1=(((2+3)*4))
					RESET2=$[(2+3)*4]  推荐这种
					RESET3='expr 2 + 3' #注意+号两边需要有空格
			条件判断
				[ condition ] 注意:condition前后要有空格
				#非空返回true,可使用$?验证(0为true, >1为false
				常用判断语句
					=字符串
					-lt 小于
					-le 小于等于
					-eq 等于
					-gt 大于
					-ge 大于等于
					-ne 不等于
					
					-r有读的权限
					-w有些的权限
					-x有执行的权限
					
					-f文件存在并且是一个常规的文件
					-e文件存在
					-d文件存在并是一个目录
					
					案例判断文件是否存在
						if [ -e /home/yinkd/a.txt ]
						then 
							echo "111"
						fi
			
						if [ 4 > 3 ]
						then
								echo "真"
						fi
			case分支语句
				#!/bin/bash
				case $1 in
				"1")
						echo "周一";;
				"2")
						echo "周二";;
				*)
						echo "所有";;
				esac
			for循环
				第一种写法
					#!/bin/bash
					#因为$*是把所有的参数当成一个整体,所以只打印一次,$*不会把%0获取到
					for i in "$*"
					do
							echo "the num is $i"
					done


					#$@是把参数分开来全部获取,就跟列表一样,所以这个会打印多次
					for j in "$@"
					do
							echo "the num is $j"
					done
				第二种写法
					for((i=1;i<100;i++))
					do
						echo "$i"
					done
			while循环
				while [ 条件判断 ]
				do
					echo  "内容"
				done
			read读取控制台内容
				#!/bin/bash
				#接收控制台输入的内容
				read -p "请输入一个数num1=" NUM1
				echo $NUM1
				#添加了一个输入时间限制,限制10秒时间
				read -t 10  -p "请输入一个数num2=" NUM2
				echo $NUM2
		basename命令
			basename /root/shell/myShell.sh  返回内容为myShell.sh,也就是说返回最后文件的文件名
			basename /root/shell/myShell.sh .sh 返回内容为myShell,也就是说返回去除.sh的剩余部分,也可以去除掉ell.sh自己定义
		函数
			#函数获取参数用上边的$@,$0等接收
			function getSum(){
					echo $*
					echo $@
					echo $1
					echo $0
					echo $2 
			}
			read -p "请输入第一个数n1=" n1
			read -p "请输入第二个数n2=" n2
			#调用函数
			getSum
			getSum 40 60
			
			
		防火墙开放端口
			在/etc/sysconfig/iptables文件设计了那些端口可以被访问,如果想开放服务器的端口在这设置
			设置好了以后,需要重启防火墙才能生效
			
			
			
			
			
				
				
				
				





			
		
		
				